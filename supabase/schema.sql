create table public.organizations (
  id uuid not null default extensions.uuid_generate_v4 (),
  name character varying(255) not null,
  email character varying(255) not null,
  phone character varying(50) null,
  address text null,
  subscription_plan character varying(50) null default 'trial'::character varying,
  subscription_status character varying(50) null default 'active'::character varying,
  max_projects integer null default 5,
  max_users integer null default 3,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint organizations_pkey primary key (id),
  constraint organizations_email_key unique (email)
) TABLESPACE pg_default;

create trigger update_organizations_updated_at BEFORE
update on organizations for EACH row
execute FUNCTION update_updated_at_column ();


create table public.users (
  id uuid not null default extensions.uuid_generate_v4 (),
  organization_id uuid not null,
  email character varying(255) not null,
  full_name character varying(255) not null,
  role character varying(50) null default 'user'::character varying,
  phone character varying(50) null,
  is_active boolean null default true,
  last_login timestamp with time zone null,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  constraint users_pkey primary key (id),
  constraint users_email_key unique (email),
  constraint users_organization_id_fkey foreign KEY (organization_id) references organizations (id) on delete CASCADE
) TABLESPACE pg_default;

create index IF not exists idx_users_organization on public.users using btree (organization_id) TABLESPACE pg_default;

create trigger update_users_updated_at BEFORE
update on users for EACH row
execute FUNCTION update_updated_at_column ();

create table public.email_confirmations (
  token uuid not null,
  user_id uuid null,
  sent_at timestamp with time zone not null default now(),
  consumed_at timestamp with time zone null,
  constraint email_confirmations_pkey primary key (token),
  constraint email_confirmations_user_id_fkey foreign KEY (user_id) references users (id) on delete CASCADE
) TABLESPACE pg_default;

create table public.sehirler (
  id bigint generated by default as identity not null,
  sehir text null,
  plaka_kodu text null,
  constraint sehirler_pkey primary key (id),
  constraint sehirler_plaka_kodu_unique unique (plaka_kodu)
) TABLESPACE pg_default;

create table public.ilceler (
  id bigint generated by default as identity not null,
  ilce text null,
  plaka_kodu text null,
  constraint ilceler_pkey primary key (id),
  constraint ilceler_plaka_kodu_fkey foreign KEY (plaka_kodu) references sehirler (plaka_kodu)
) TABLESPACE pg_default;

create table public.warehouse_types (
  id serial not null,
  type_code character varying(50) not null,
  type_name character varying(100) not null,
  description text null,
  icon_name character varying(50) null,
  default_temperature numeric(4, 1) not null,
  temp_range_min numeric(4, 1) not null,
  temp_range_max numeric(4, 1) not null,
  default_humidity numeric(4, 1) null,
  humidity_range_min numeric(4, 1) null,
  humidity_range_max numeric(4, 1) null,
  air_change_rate numeric(4, 2) null,
  recommended_velocity numeric(4, 2) null,
  display_order integer null default 0,
  is_active boolean null default true,
  created_at timestamp without time zone null default CURRENT_TIMESTAMP,
  updated_at timestamp without time zone null default CURRENT_TIMESTAMP,
  constraint warehouse_types_pkey primary key (id),
  constraint warehouse_types_type_code_key unique (type_code)
) TABLESPACE pg_default;

create index IF not exists idx_warehouse_types_active on public.warehouse_types using btree (is_active) TABLESPACE pg_default;

create index IF not exists idx_warehouse_types_order on public.warehouse_types using btree (display_order) TABLESPACE pg_default;

create unique INDEX IF not exists idx_warehouse_types_code on public.warehouse_types using btree (type_code) TABLESPACE pg_default;

create trigger update_warehouse_types_modtime BEFORE
update on warehouse_types for EACH row
execute FUNCTION update_warehouse_types_modified_column ();

create table public.product_thermal_properties (
  id serial not null,
  product_name character varying(150) not null,
  category character varying(50) not null,
  freezing_point numeric(4, 2) null,
  specific_heat_above_freezing numeric(5, 2) not null,
  specific_heat_below_freezing numeric(5, 2) null,
  latent_heat_fusion numeric(6, 2) null,
  water_content numeric(4, 1) null,
  density_above_freezing numeric(6, 1) null,
  density_below_freezing numeric(6, 1) null,
  respiration_rate numeric(6, 2) null default 0,
  moisture_loss_rate numeric(4, 2) null default 0,
  data_source character varying(100) null,
  notes text null,
  is_active boolean null default true,
  created_at timestamp without time zone null default CURRENT_TIMESTAMP,
  updated_at timestamp without time zone null default CURRENT_TIMESTAMP,
  optimal_storage_temp_min numeric(4, 1) null,
  optimal_storage_temp_max numeric(4, 1) null,
  optimal_humidity_min numeric(4, 1) null,
  optimal_humidity_max numeric(4, 1) null,
  constraint product_thermal_properties_pkey primary key (id)
) TABLESPACE pg_default;

create index IF not exists idx_product_thermal_storage_temp on public.product_thermal_properties using btree (
  optimal_storage_temp_min,
  optimal_storage_temp_max
) TABLESPACE pg_default;

create index IF not exists idx_product_thermal_category on public.product_thermal_properties using btree (category) TABLESPACE pg_default;

create index IF not exists idx_product_thermal_name on public.product_thermal_properties using btree (product_name) TABLESPACE pg_default;

create index IF not exists idx_product_thermal_active on public.product_thermal_properties using btree (is_active) TABLESPACE pg_default;

create index IF not exists idx_product_thermal_humidity on public.product_thermal_properties using btree (optimal_humidity_min, optimal_humidity_max) TABLESPACE pg_default;

create trigger update_product_thermal_properties_modtime BEFORE
update on product_thermal_properties for EACH row
execute FUNCTION update_modified_column ();

create table public.insulation_types (
  id serial not null,
  name text not null,
  category text not null,
  u_value real not null,
  thickness integer null,
  description text null,
  constraint insulation_types_pkey primary key (id),
  constraint insulation_types_name_key unique (name)
) TABLESPACE pg_default;